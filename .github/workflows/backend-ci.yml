name: Backend CI

on:
  push:
    branches: [ main ]
    paths:
      - 'services/**'
      - '.github/workflows/backend-ci.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/**'
      - '.github/workflows/backend-ci.yml'

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [api, device-mgmt, analytics]
        include:
          - service: api
            test_dir: services/api
            has_tests: true
          - service: device-mgmt
            test_dir: services/device-mgmt
            has_tests: false
          - service: analytics
            test_dir: services/analytics
            has_tests: false
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'
    
    - name: Install dependencies
      run: |
        cd ${{ matrix.test_dir }}
        python -m pip install --upgrade pip
        pip install pytest pytest-cov httpx flake8
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
    
    - name: Lint with flake8
      run: |
        cd ${{ matrix.test_dir }}
        # stop the build if there are Python syntax errors or undefined names
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
      continue-on-error: true
    
    - name: Test with pytest
      if: ${{ matrix.has_tests }}
      run: |
        cd ${{ matrix.test_dir }}
        pytest --cov=app --cov-report=xml --junitxml=test-results.xml
    
    - name: No tests available
      if: ${{ !matrix.has_tests }}
      run: echo "No tests available for ${{ matrix.service }} service yet. Skipping test step."
    
    - name: Upload test results
      if: ${{ matrix.has_tests }}
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.service }}-test-results
        path: ${{ matrix.test_dir }}/test-results.xml
    
    - name: Upload coverage report
      if: ${{ matrix.has_tests }}
      uses: codecov/codecov-action@v3
      with:
        file: ${{ matrix.test_dir }}/coverage.xml
        flags: ${{ matrix.service }}
        fail_ci_if_error: false

  docker-build:
    runs-on: ubuntu-latest
    needs: test
    strategy:
      matrix:
        service: [api, device-mgmt, analytics]
        include:
          - service: api
            dockerfile_dir: services/api
          - service: device-mgmt
            dockerfile_dir: services/device-mgmt
          - service: analytics
            dockerfile_dir: services/analytics
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Build Docker image
      run: |
        cd ${{ matrix.dockerfile_dir }}
        docker build -t home-automation-${{ matrix.service }}:test .
    
    - name: Test Docker image
      run: |
        docker run --rm home-automation-${{ matrix.service }}:test python -c "print('Docker image works!')"